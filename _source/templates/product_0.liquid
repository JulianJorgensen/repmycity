<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  {% if settings.show_breadcrumb %}
    {% include 'breadcrumb' %}
  {% endif %}

  <div class="grid product-single">
    <div class="grid__item large--one-half text-center">
      <div class="product-single__photos" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
      </div>

      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-quarter">
              <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}
    </div>

    <div class="grid__item large--one-half">

      <div class="spdiv">

        <h1 class="product-single-title" itemprop="name">{{ product.title }}</h1>

        <div itemprop="offers" itemscope itemtype="http://schema.org/Offer" class="product_desc">

          <meta itemprop="priceCurrency" content="{{ shop.currency }}">

          <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

          <div class="product-description rte" itemprop="description">
            
            <div>
              <h4 class="green_underline">ARTIST</h4>
              {% if product.metafields.artist.name != blank %}
                <p id="product_artist">{{ product.metafields.artist.name }}</p>
              {% elsif product.vendor != blank %}
                <p id="product_vendor">{{ product.vendor }}</p>
              {% else %}
                <p>REPMICITY</p>
              {% endif %}
            </div>

            <div>
              <h4 class = "green_underline">DESCRIPTION</h4>

              {% if product.metafields.artist.state != blank  or product.metafields.artist.city != blank %}
                {% if product.metafields.artist.state != blank %}
                  <p id="product_artist_state">{{ product.metafields.artist.state }}</p>
                {% endif %}
                {% if product.metafields.artist.city != blank %}
                  <p id="product_artist_city">{{ product.metafields.artist.city }}</p>
                {% endif %}
              {% endif %}
              
              {{ product.description }}
            </div>

          </div>

          {% comment %}
            Show inventory table
          {% endcomment %}

          {% if settings.product_show_inventory_table %}
            {% include 'inventory-table' %}
          {% endif %}
          
          {% comment %}
            ID addToCartForm is a selector for the ajax cart plugin
          {% endcomment %}
          <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">

            {% comment %}
              Add product variants as a dropdown.
                - By default, each variant (or combination of variants) will display as its own <option>
                - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

              You can leverage jQuery to add a callback on page load and each time the select element changes:
                - Include option_selection.js (as seen at the bottom of this file)
                - This allows you to use JavaScript anytime the variant dropdown changes
                - This also separates out your variant options (ie. size, color, etc.) to separate select elements

              For more information on products with multiple options, visit:
                - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
            {% endcomment %}
            <select name="id" id="productSelect" class="product-single__variants">
              {% for variant in product.variants %}
                {% if variant.available %}

                  {% comment %}
                    Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                  {% endcomment %}
                  <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

                {% else %}
                  <option disabled="disabled">
                    {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                  </option>
                {% endif %}
              {% endfor %}
            </select>

            <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
            <span id="ProductPrice" class="h2" itemprop="price" content="{{ current_variant.price | divided_by: 100 }}">
              {{ current_variant.price | money }}
            </span>

            {% if product.compare_at_price_max > product.price %}
              <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
              <p id="ComparePrice">
                {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
              </p>
            {% endif %}

            <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
            <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
            
            {% comment %}
            This is for select quantitiy from drop down.
              <label for="quantity">Qty: </label>
              <select id="quantity" name="quantity">
              {% for i in (1..10) %}
              <option value="{{ i }}">{{ i }}</option>
              {% endfor %}
              </select>
            {% endcomment %}

            <button type="submit" name="add" id="AddToCart" class="btn">
              <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
            </button>
          </form>

        </div>

        {% comment %}
          If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
          in the URL, we can show next/previous links to other products in the collection.
        {% endcomment %}
        {% if collection %}
          {% if collection.previous_product or collection.next_product %}
            <p>
              {% if collection.previous_product %}
                <span class="left">
                  {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
                </span>
              {% endif %}
              {% if collection.next_product %}
                <span class="right">
                  {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
                </span>
              {% endif %}
            </p>
          {% endif %}
        {% endif %}

        </div><!-- spdiv-->
    </div>
  </div>

</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    var optionSelectors = new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

     optionSelectors.selectVariant({{ product.selected_or_first_available_variant.id }});

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>

{% comment %}
Select product variants by clicking their images
{% endcomment %}
{% if product.variants.size > 1 %}
<script>
(function($) { 
  var variantImages = {},
    thumbnails,
    variant,
    variantImage,
    optionValue;
    {% for variant in product.variants %}
       variant = {{ variant | json }};
       if ( typeof variant.featured_image !== 'undefined' && variant.featured_image !== null ) {
         variantImage =  variant.featured_image.src.split('?')[0].replace(/http(s)?:/,'');
         variantImages[variantImage] = variantImages[variantImage] || {};
         {% for option in product.options %}
           {% assign option_value = variant.options[forloop.index0] %}
           {% assign option_key = 'option-' | append: forloop.index0 %}
           if (typeof variantImages[variantImage][{{ option_key | json }}] === 'undefined') {
             variantImages[variantImage][{{ option_key | json }}] = {{ option_value | json }};
           }
           else {
             var oldValue = variantImages[variantImage][{{ option_key | json }}];
             if ( oldValue !== null && oldValue !== {{ option_value | json }} )  {
               variantImages[variantImage][{{ option_key | json }}] = null;
             }
           }
         {% endfor %}
       }
    {% endfor %}
    $(function() {
      thumbnails = $('img[src*="/products/"]').not(':first');
      if (thumbnails.size()) {
        thumbnails.bind('click', function() {
          var image = $(this).attr('src').split('?')[0].replace(/(_thumb\.)|(_small\.)|(_compact\.)|(_medium\.)|(_large\.)|(_grande\.)/,'.');
          if (typeof variantImages[image] !== 'undefined') {
            {% for option in product.options %}
            optionValue = variantImages[image]['option-{{ forloop.index0 }}'];
            if (optionValue !== null && $('.single-option-selector:eq({{ forloop.index0 }}) option').filter(function() { return $(this).text() === optionValue }).length) {
              $('.single-option-selector:eq({{ forloop.index0 }})').val(optionValue).trigger('change');
            }
            {% endfor %}
          }
        });
      }
    });
})(jQuery);
</script> 
{% endif %}